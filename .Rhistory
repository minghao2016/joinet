rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1)# foldid=foldid
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
models <- c("none","enet","lasso","ridge","rf")
pred <- matrix(data=NA,nrow=length(y),ncol=length(models),dimnames=list(NULL,models))
for(i in unique(foldid)){
y0 <- y[foldid!=i]
y1 <- y[foldid==i]
X0 <- X[foldid!=i,]
X1 <- X[foldid==i,]
#################
### intercept ###
#################
pred[foldid==i,"none"] <- mean(y0)
###################
### elastic net ###
###################
alpha <- seq(from=0,to=1,by=0.2)
model <- list()
foldid.int <- palasso:::.folds(y=y0,nfolds=10)
for(j in seq_along(alpha)){
model[[j]] <- glmnet::cv.glmnet(y=y0,x=X0,family="binomial",alpha=alpha[j],
foldid=foldid.int) # type.measure
}
rm(j)
cvm <- sapply(model,function(x) x$cvm[x$lambda==x$lambda.min])
id <- which.min(cvm)
graphics::plot(x=alpha,y=cvm,main="elastic net")
graphics::axis(side=1,at=c(0,1),label=c("ridge","lasso"),line=1.5,tick=FALSE)
pred[foldid==i,"lasso"] <- glmnet::predict.cv.glmnet(object=model[[which(alpha==1)]],
newx=X1,type="response")
pred[foldid==i,"enet"] <- glmnet::predict.cv.glmnet(object=model[[id]],
newx=X1,type="response")
pred[foldid==i,"ridge"] <- glmnet::predict.cv.glmnet(object=model[[which(alpha==0)]],
newx=X1,type="response")
#####################
### random forest ###
#####################
rf <- randomForest::randomForest(y=as.factor(y0),x=X0)
pred[foldid==i,"rf"] <- randomForest:::predict.randomForest(object=rf,
newdata=X1,type="prob")[,"1"]
}
rm(i,y0,y1,X0,X1,alpha,model,foldid.int,cvm,id,rf)
### comparison ###
apply(X=pred,MARGIN=2,FUN=function(x) mean(-2*(y*log(x)+(1-y)*log(1-x)))) # deviance
apply(X=pred,MARGIN=2,FUN=function(x) 2*mean((x-y)^2)) # MSE
apply(X=pred,MARGIN=2,FUN=function(x) 2*mean(abs(x-y))) # MAE
apply(X=pred,MARGIN=2,FUN=function(x) mean(abs(round(x)-y))) # class
apply(X=pred,MARGIN=2,FUN=function(x) pROC::auc(response=y,predictor=x)) # AUC
rm(models,pred)
foldid <- palasso::.folds(y=y,nfolds=10)
foldid <- palasso:::.folds(y=y,nfolds=10)
models <- c("none","enet","lasso","ridge","rf")
pred <- matrix(data=NA,nrow=length(y),ncol=length(models),dimnames=list(NULL,models))
foldid <- palasso:::.folds(y=y,nfolds=10)
for(i in unique(foldid)){
y0 <- y[foldid!=i]
y1 <- y[foldid==i]
X0 <- X[foldid!=i,]
X1 <- X[foldid==i,]
#################
### intercept ###
#################
pred[foldid==i,"none"] <- mean(y0)
###################
### elastic net ###
###################
alpha <- seq(from=0,to=1,by=0.2)
model <- list()
foldid.int <- palasso:::.folds(y=y0,nfolds=10)
for(j in seq_along(alpha)){
model[[j]] <- glmnet::cv.glmnet(y=y0,x=X0,family="binomial",alpha=alpha[j],
foldid=foldid.int) # type.measure
}
rm(j)
cvm <- sapply(model,function(x) x$cvm[x$lambda==x$lambda.min])
id <- which.min(cvm)
graphics::plot(x=alpha,y=cvm,main="elastic net")
graphics::axis(side=1,at=c(0,1),label=c("ridge","lasso"),line=1.5,tick=FALSE)
pred[foldid==i,"lasso"] <- glmnet::predict.cv.glmnet(object=model[[which(alpha==1)]],
newx=X1,type="response")
pred[foldid==i,"enet"] <- glmnet::predict.cv.glmnet(object=model[[id]],
newx=X1,type="response")
pred[foldid==i,"ridge"] <- glmnet::predict.cv.glmnet(object=model[[which(alpha==0)]],
newx=X1,type="response")
#####################
### random forest ###
#####################
rf <- randomForest::randomForest(y=as.factor(y0),x=X0)
pred[foldid==i,"rf"] <- randomForest:::predict.randomForest(object=rf,
newdata=X1,type="prob")[,"1"]
}
rm(i,y0,y1,X0,X1,alpha,model,foldid.int,cvm,id,rf)
### comparison ###
apply(X=pred,MARGIN=2,FUN=function(x) mean(-2*(y*log(x)+(1-y)*log(1-x)))) # deviance
apply(X=pred,MARGIN=2,FUN=function(x) 2*mean((x-y)^2)) # MSE
apply(X=pred,MARGIN=2,FUN=function(x) 2*mean(abs(x-y))) # MAE
apply(X=pred,MARGIN=2,FUN=function(x) mean(abs(round(x)-y))) # class
apply(X=pred,MARGIN=2,FUN=function(x) pROC::auc(response=y,predictor=x)) # AUC
rm(models,pred)
models <- c("none","enet","lasso","ridge","rf")
pred <- matrix(data=NA,nrow=length(y),ncol=length(models),dimnames=list(NULL,models))
foldid <- palasso:::.folds(y=y,nfolds=10)
for(i in unique(foldid)){
y0 <- y[foldid!=i]
y1 <- y[foldid==i]
X0 <- X[foldid!=i,]
X1 <- X[foldid==i,]
#################
### intercept ###
#################
pred[foldid==i,"none"] <- mean(y0)
###################
### elastic net ###
###################
alpha <- seq(from=0,to=1,by=0.2)
model <- list()
foldid.int <- palasso:::.folds(y=y0,nfolds=10)
for(j in seq_along(alpha)){
model[[j]] <- glmnet::cv.glmnet(y=y0,x=X0,family="binomial",alpha=alpha[j],
foldid=foldid.int) # type.measure
}
rm(j)
cvm <- sapply(model,function(x) x$cvm[x$lambda==x$lambda.min])
id <- which.min(cvm)
graphics::plot(x=alpha,y=cvm,main="elastic net")
graphics::axis(side=1,at=c(0,1),label=c("ridge","lasso"),line=1.5,tick=FALSE)
pred[foldid==i,"lasso"] <- glmnet::predict.cv.glmnet(object=model[[which(alpha==1)]],
newx=X1,type="response")
pred[foldid==i,"enet"] <- glmnet::predict.cv.glmnet(object=model[[id]],
newx=X1,type="response")
pred[foldid==i,"ridge"] <- glmnet::predict.cv.glmnet(object=model[[which(alpha==0)]],
newx=X1,type="response")
#####################
### random forest ###
#####################
rf <- randomForest::randomForest(y=as.factor(y0),x=X0)
pred[foldid==i,"rf"] <- randomForest:::predict.randomForest(object=rf,
newdata=X1,type="prob")[,"1"]
}
rm(i,y0,y1,X0,X1,alpha,model,foldid.int,cvm,id,rf)
### comparison ###
apply(X=pred,MARGIN=2,FUN=function(x) mean(-2*(y*log(x)+(1-y)*log(1-x)))) # deviance
apply(X=pred,MARGIN=2,FUN=function(x) 2*mean((x-y)^2)) # MSE
apply(X=pred,MARGIN=2,FUN=function(x) 2*mean(abs(x-y))) # MAE
apply(X=pred,MARGIN=2,FUN=function(x) mean(abs(round(x)-y))) # class
apply(X=pred,MARGIN=2,FUN=function(x) pROC::auc(response=y,predictor=x)) # AUC
rm(models,pred)
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
ridge <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=0,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=ridge,type="coefficient",s="lambda.min")
rownames(betas)[rank(-abs(as.numeric(betas)))<=5]
ridge <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=0,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=ridge,type="coefficient",s="lambda.min")
rownames(betas)[rank(-abs(as.numeric(betas)))<=5]
ridge <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=0,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=ridge,type="coefficient",s="lambda.min")
rownames(betas)[rank(-abs(as.numeric(betas)))<=5]
ridge <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=0,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=ridge,type="coefficient",s="lambda.min")
rownames(betas)[rank(-abs(as.numeric(betas)))<=5]
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
# random forest
rf <- randomForest::randomForest(y=as.factor(y),x=X,importance=TRUE)
colnames(X)[rank(-randomForest::importance(x=rf,type=1))<=3] # accuracy
colnames(X)[rank(-randomForest::importance(x=rf,type=2))<=3] # node impurity
# lasso
lasso <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=1,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=lasso,type="coefficient",s="lambda.min")
rownames(betas)[which(as.numeric(betas)!=0)]
ridge <- glmnet::cv.glmnet(y=y,x=X,family="binomial",alpha=0,foldid=foldid)
betas <- glmnet::predict.cv.glmnet(object=ridge,type="coefficient",s="lambda.min")
rownames(betas)[rank(-abs(as.numeric(betas)))<=5]
# random forest
rf <- randomForest::randomForest(y=as.factor(y),x=X,importance=TRUE)
colnames(X)[rank(-randomForest::importance(x=rf,type=1))<=3] # accuracy
colnames(X)[rank(-randomForest::importance(x=rf,type=2))<=3] # node impurity
rf <- randomForest::randomForest(y=as.factor(y),x=X,importance=TRUE)
colnames(X)[rank(-randomForest::importance(x=rf,type=1))<=3] # accuracy
colnames(X)[rank(-randomForest::importance(x=rf,type=2))<=3] # node impurity
rf <- randomForest::randomForest(y=as.factor(y),x=X,importance=TRUE)
colnames(X)[rank(-randomForest::importance(x=rf,type=1))<=3] # accuracy
colnames(X)[rank(-randomForest::importance(x=rf,type=2))<=3] # node impurity
rf <- randomForest::randomForest(y=as.factor(y),x=X,importance=TRUE)
colnames(X)[rank(-randomForest::importance(x=rf,type=1))<=3] # accuracy
colnames(X)[rank(-randomForest::importance(x=rf,type=2))<=3] # node impurity
rf <- randomForest::randomForest(y=as.factor(y),x=X,importance=TRUE)
colnames(X)[rank(-randomForest::importance(x=rf,type=1))<=3] # accuracy
colnames(X)[rank(-randomForest::importance(x=rf,type=2))<=3] # node impurity
rf <- randomForest::randomForest(y=as.factor(y),x=X,importance=TRUE)
colnames(X)[rank(-randomForest::importance(x=rf,type=1))<=3] # accuracy
colnames(X)[rank(-randomForest::importance(x=rf,type=2))<=3] # node impurity
rf <- randomForest::randomForest(y=as.factor(y),x=X,importance=TRUE)
colnames(X)[rank(-randomForest::importance(x=rf,type=1))<=3] # accuracy
colnames(X)[rank(-randomForest::importance(x=rf,type=2))<=3] # node impurity
?randomForest
n <- 100
p <- 300
Sigma <- matrix(data=0.05,nrow=p,ncol=p)
X <- MASS::mvrnorm(n=n,mu=rep(0,p),Sigma=Sigma)
# X <- matrix(stats::rnorm(n*p),nrow=n,ncol=p)
beta <- rep(1,times=p)
beta[stats::rbinom(n=p,size=1,prob=0.95)==1] <- 0
mu <- X %*% beta
Y <- replicate(n=10,expr=stats::rnorm(n=n,mean=mu,sd=10))
plot(mu,rowMeans(Y))
cor <- cor(Y)
cor[row(cor)>=col(cor)] <- NA
median(cor,na.rm=TRUE)
y <- scale(Y[,1])
ym <- scale(rowMeans(Y[,-1]))
Y <- scale(Y)
colasso:::colasso_compare(y=y,Y=Y,X=X)
rm(list=ls())
#--- generate toydata ----------------------------------------------------------
set.seed(1)
#toydata <- NULL
#save(toydata,file=file.path("C:/Users/armin.rauschenberger/Desktop/package/colasso/data/toydata.R"))
#--- compile package -----------------------------------------------------------
rm(list=ls())
name <- "colasso"
#load("D:/colasso/package/toydata.RData")
pkg <- "C:/Users/armin.rauschenberger/Desktop/package/colasso"
setwd(dir=pkg)
devtools::as.package(x=pkg,create=FALSE)
devtools::load_all(path=pkg)
#usethis::use_data(toydata,overwrite=TRUE)
devtools::document(pkg=pkg)
unlink(file.path(pkg,"vignettes","figure"),recursive=TRUE)
all <- dir(file.path(pkg,"vignettes"))
#delete <- "..."
#sapply(delete,function(x) file.remove(file.path(pkg,"vignettes",x)))
setwd(dir=pkg)
unlink(file.path(pkg,"docs"),recursive=TRUE)
pkgdown::build_site(pkg=pkg)
file.remove(file.path(pkg,".Rbuildignore"))
usethis::use_build_ignore(files=c("Readme.Rmd",".travis.yml","_pkgdown.yml","docs","cran-comments.md","appveyor.yml"))
devtools::check(pkg=pkg,quiet=FALSE,manual=TRUE)
devtools::build(path=pkg)
n <- 100
p <- 300
Sigma <- matrix(data=0.05,nrow=p,ncol=p)
X <- MASS::mvrnorm(n=n,mu=rep(0,p),Sigma=Sigma)
# X <- matrix(stats::rnorm(n*p),nrow=n,ncol=p)
beta <- rep(1,times=p)
beta[stats::rbinom(n=p,size=1,prob=0.95)==1] <- 0
mu <- X %*% beta
Y <- replicate(n=10,expr=stats::rnorm(n=n,mean=mu,sd=10))
plot(mu,rowMeans(Y))
cor <- cor(Y)
cor[row(cor)>=col(cor)] <- NA
median(cor,na.rm=TRUE)
y <- scale(Y[,1])
ym <- scale(rowMeans(Y[,-1]))
Y <- scale(Y)
# consider scaling of responses!
colasso:::colasso_compare(y=y,Y=Y,X=X)
n <- 100
p <- 300
Sigma <- matrix(data=0.05,nrow=p,ncol=p)
X <- MASS::mvrnorm(n=n,mu=rep(0,p),Sigma=Sigma)
# X <- matrix(stats::rnorm(n*p),nrow=n,ncol=p)
beta <- rep(1,times=p)
beta[stats::rbinom(n=p,size=1,prob=0.95)==1] <- 0
mu <- X %*% beta
Y <- replicate(n=10,expr=stats::rnorm(n=n,mean=mu,sd=10))
plot(mu,rowMeans(Y))
cor <- cor(Y)
cor[row(cor)>=col(cor)] <- NA
median(cor,na.rm=TRUE)
y <- scale(Y[,1])
ym <- scale(rowMeans(Y[,-1]))
Y <- scale(Y)
# consider scaling of responses!
colasso:::colasso_compare(y=y,Y=Y,X=X)
warnings()
n <- 100
p <- 300
Sigma <- matrix(data=0.05,nrow=p,ncol=p)
X <- MASS::mvrnorm(n=n,mu=rep(0,p),Sigma=Sigma)
# X <- matrix(stats::rnorm(n*p),nrow=n,ncol=p)
beta <- rep(1,times=p)
beta[stats::rbinom(n=p,size=1,prob=0.95)==1] <- 0
mu <- X %*% beta
Y <- replicate(n=10,expr=stats::rnorm(n=n,mean=mu,sd=10))
plot(mu,rowMeans(Y))
cor <- cor(Y)
cor[row(cor)>=col(cor)] <- NA
median(cor,na.rm=TRUE)
y <- scale(Y[,1])
ym <- scale(rowMeans(Y[,-1]))
Y <- scale(Y)
# consider scaling of responses!
colasso:::colasso_compare(y=y,Y=Y,X=X)
n <- 100
p <- 300
Sigma <- matrix(data=0.05,nrow=p,ncol=p)
X <- MASS::mvrnorm(n=n,mu=rep(0,p),Sigma=Sigma)
# X <- matrix(stats::rnorm(n*p),nrow=n,ncol=p)
beta <- rep(1,times=p)
beta[stats::rbinom(n=p,size=1,prob=0.95)==1] <- 0
mu <- X %*% beta
Y <- replicate(n=10,expr=stats::rnorm(n=n,mean=mu,sd=10))
plot(mu,rowMeans(Y))
cor <- cor(Y)
cor[row(cor)>=col(cor)] <- NA
median(cor,na.rm=TRUE)
y <- scale(Y[,1])
ym <- scale(rowMeans(Y[,-1]))
Y <- scale(Y)
# consider scaling of responses!
colasso:::colasso_compare(y=y,Y=Y,X=X)
rm(list=ls())
set.seed(1)
#toydata <- NULL
#save(toydata,file=file.path("C:/Users/armin.rauschenberger/Desktop/package/colasso/data/toydata.R"))
#--- compile package -----------------------------------------------------------
rm(list=ls())
name <- "colasso"
pkg <- "C:/Users/armin.rauschenberger/Desktop/package/colasso"
setwd(dir=pkg)
devtools::as.package(x=pkg,create=FALSE)
devtools::load_all(path=pkg)
#usethis::use_data(toydata,overwrite=TRUE)
devtools::document(pkg=pkg)
unlink(file.path(pkg,"vignettes","figure"),recursive=TRUE)
all <- dir(file.path(pkg,"vignettes"))
setwd(dir=pkg)
unlink(file.path(pkg,"docs"),recursive=TRUE)
pkgdown::build_site(pkg=pkg)
file.remove(file.path(pkg,".Rbuildignore"))
usethis::use_build_ignore(files=c("Readme.Rmd",".travis.yml","_pkgdown.yml","docs","cran-comments.md","appveyor.yml"))
devtools::check(pkg=pkg,quiet=FALSE,manual=TRUE)
devtools::build(pkg=pkg)
pkg
setwd(pkg)
system("git remote set-url origin https://rauschenberger:Merkel0517@github.com/rauschenberger/colasso.git")
system("git remote -v")
system("git add --all")
system("git commit -m \"automation\"")
system("git push origin master") # GitHub
#pkg <- "E:/colasso/package/colasso"
setwd(pkg)
system("git remote set-url origin https://rauschenberger:Merkel0517@github.com/rauschenberger/colasso.git")
system("git remote -v")
system("git add --all")
system("git commit -m \"automation\"")
system("git push origin master") # GitHub
